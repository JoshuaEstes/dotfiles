#!/usr/bin/env bash
####
#
# install dotfiles
#

# Location where the dotfiles will live
DOTFILES_HOME="$HOME/dotfiles"
source $DOTFILES_HOME/lib/colours

####
# Symlink a dotfile from the ~/.dotfiles directory to where
# it needs to go in the home directory
#
# Usage: symlink_dotfile "bashrc"
#
# @param string $1 Filename to symlink
#
function symlink_dotfile()
{
    if [ -z "$1" ]; then
        echo "You must pass a filename to this function"
        return 1
    fi

    # Not not a symlink, link it
    if [ ! -h $HOME/.$1 ]; then
        ln -Fvs $DOTFILES_HOME/$1 $HOME/.$1
    else
        echo "Could not symlink $HOME/.$1"
    fi
}

mkdir -p $HOME/Projects
mkdir -p $HOME/Virtualenvs

# Install git submodules
git submodule update --init --recursive

# Create symlinks
symlink_dotfile "ackrc"
symlink_dotfile "bash_logout"
symlink_dotfile "bash_profile"
symlink_dotfile "bashrc"
symlink_dotfile "gemrc"
symlink_dotfile "gitconfig"
symlink_dotfile "inputrc"
if [ "$(uname)" == "Darwin" ]; then
    symlink_dotfile "osx"
fi
symlink_dotfile "taskrc"
symlink_dotfile "tmux.conf"
symlink_dotfile "vimrc"
symlink_dotfile "zlogin"
symlink_dotfile "zlogout"
symlink_dotfile "zprofile"
symlink_dotfile "zshenv"
symlink_dotfile "zshrc"
symlink_dotfile "bash.d"

if [ ! -h $HOME/bin ]; then
    ln -Fvs $DOTFILES_HOME/bin $HOME/bin
fi

if [ ! -d $HOME/.composer ]; then
    mkdir $HOME/.composer
fi
symlink_dotfile "composer/composer.json"
symlink_dotfile "gitconfig.d"
symlink_dotfile "irssi"
symlink_dotfile "mutt"
symlink_dotfile "vim"
symlink_dotfile "zsh.d"

# Install php stuff
if [ $(command -v php) ]; then
    PHP_BIN=$(command -v php)
    # PHP is installed. Install composer and
    # install some apps
    if [ -f $HOME/bin/composer.phar ]; then
        $PHP_BIN $HOME/bin/composer.phar selfupdate
    else
        curl -sS https://getcomposer.org/installer | $PHP_BIN -- --install-dir=$HOME/bin
    fi
    $PHP_BIN $HOME/bin/composer.phar global update
fi

# Install OSX stuff
if [ "$(uname)" == "Darwin" ]; then
    if [ ! $(command -v brew) ]; then
        echo "Installing homebrew"
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    brew update
    brew tap homebrew/dupes
    brew install coreutils
    brew install findutils
    brew install bash
    brew install grep
    #brew install graphicsmagick
    brew install webkit2png
    #brew install rename
    #brew install zopfli
    #brew install ffmpeg --with-openssl
    #brew install python
    #brew install sshfs
    #brew install trash
    brew install node
    brew install tree
    brew install ack
    #brew install hub
    brew install git
    brew install bash-completion
    brew install ssh-copy-id
    brew install wget
    brew install python3
    brew install ruby
    brew install irssi --with-openssl
    brew install mutt
    brew install fetchmail
    brew install vim --with-lua # I dig the lua
    brew install lbzip2
    brew install php56 --with-gmp
    brew install php56-mcrypt
    brew linkapps
    brew cleanup
fi

####
#
# install stuff with pip
#
if [ $(command -v pip) ]; then
    echo "Installing virtualenv"
    pip install virtualenv
    # Used to check python files to make sure then conform to the language
    # standards
    echo "Installing pep8"
    pip install pep8
fi
#### end python ####

####
#
# install stuff with npm
#
if [ $(command -v npm) ]; then
    npm install -g jshint
    npm install -g grunt-cli
    npm install -g gulp
    npm install -g keybase-installer
    keybase-installer
fi
#### end nodejs ####

####
#
# Install stuff with gem
#
if [ $(command -v gem) ]; then
    # Used in git pre-commit hook to lint puppet files
    gem install puppet-lint
    gem install scss-lint
    gem install rubocop
    gem install compass
fi
#### end ruby ####

# Once all the dependencies are install this should run since it runs
# a compile script
vim +PluginInstall +qall
cd vim/bundle/YouCompleteMe
./install.sh
cd -

# Reload
echo "DEBUG::source $HOME/.bashrc"
source $HOME/.bashrc
